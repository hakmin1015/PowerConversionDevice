!=======================================================================
! Generated by: PSCAD v5.0.0.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Rectifier_Controls
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Rectifier_ControlsDyn(Msrmnt, Pulses)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
      REAL    EMTDC_XPI     ! 'Proportional-Integral Controller /w Interpolation'
!     SUBR    TRDQO         ! DQ0 transformation
!     SUBR    FTN180        ! FFT Calculation
!     SUBR    EMTDC_IGFP    ! Interpolated GTO Firing Pulses

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Msrmnt(12)
      REAL,    INTENT(OUT) :: Pulses(12)

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_2, DBlk
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     Edc, Crr, RT_7(2), RT_8, RT_9
      REAL     RT_10, RT_11, RT_12, RT_13, RT_14
      REAL     RT_15, RT_16, RT_17, RT_18, RT_19
      REAL     RT_20, RT_21, RT_22, RT_23, RT_24
      REAL     RT_25, RT_26, RT_27, RT_28, RT_29
      REAL     RT_30, RT_31, RT_32, vd, RT_33
      REAL     RT_34, RT_35, RT_36, RT_37, id
      REAL     RT_38, RT_39, Kpd, Tid, Kpq, Tiq
      REAL     iq, iqref, RT_40, RT_41, Ref_a
      REAL     RT_42, RT_43, Edc_ref, Err_e
      REAL     RT_44, Kp_dc, Ti_dc, RT_45, Ref_b
      REAL     RT_46(2), Ref_c, RT_47(2)
      REAL     RT_48(2), RT_49(2), RT_50(2)
      REAL     RT_51, Err_d, Err_q, RT_52, idref
      REAL     theta, Ea, Eb, Ec, RT_53, Ia_ac
      REAL     Ib_ac, Ic_ac, RT_54, vd1, vq1
      REAL     RT_55, RT_56, RT_57, RT_58, RT_59
      REAL     Vpcc, RT_60, RT_61, RT_62, Ti_Q
      REAL     Kp_Q, Ifura, Ifurb, Ifurc, RT_63
      REAL     RT_64(7), RT_65(7), RT_66(7)
      REAL     RT_67(7), Ifurd_dc, Ifurd
      REAL     Ifurq_dc, Ifurq, RT_68, Ifurq_err
      REAL     Corr, Ifurd_err, RT_69, L, vq

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD2_1(2), RVD1_1, RVD1_2, RVD1_3

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ICX, IPGB                           ! Control/Monitoring
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 3
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 167
      IPGB      = NPGB
      NPGB      = NPGB + 24
      ICX       = NCX
      NCX       = NCX + 12
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 25)
      RT_2     = STOF(ISTOF + 26)
      IT_1     = STOI(ISTOI + 1)
      RT_3     = STOF(ISTOF + 27)
      IT_2     = STOI(ISTOI + 2)
      RT_4     = STOF(ISTOF + 28)
      RT_5     = STOF(ISTOF + 29)
      RT_6     = STOF(ISTOF + 30)
      Edc      = STOF(ISTOF + 31)
      Crr      = STOF(ISTOF + 32)
      RT_8     = STOF(ISTOF + 35)
      RT_9     = STOF(ISTOF + 36)
      RT_10    = STOF(ISTOF + 37)
      RT_11    = STOF(ISTOF + 38)
      RT_12    = STOF(ISTOF + 39)
      RT_13    = STOF(ISTOF + 40)
      RT_14    = STOF(ISTOF + 41)
      RT_15    = STOF(ISTOF + 42)
      RT_16    = STOF(ISTOF + 43)
      RT_17    = STOF(ISTOF + 44)
      RT_18    = STOF(ISTOF + 45)
      RT_19    = STOF(ISTOF + 46)
      RT_20    = STOF(ISTOF + 47)
      RT_21    = STOF(ISTOF + 48)
      RT_22    = STOF(ISTOF + 49)
      RT_23    = STOF(ISTOF + 50)
      RT_24    = STOF(ISTOF + 51)
      RT_25    = STOF(ISTOF + 52)
      RT_26    = STOF(ISTOF + 53)
      RT_27    = STOF(ISTOF + 54)
      RT_28    = STOF(ISTOF + 55)
      RT_29    = STOF(ISTOF + 56)
      RT_30    = STOF(ISTOF + 57)
      RT_31    = STOF(ISTOF + 58)
      RT_32    = STOF(ISTOF + 59)
      vd       = STOF(ISTOF + 60)
      RT_33    = STOF(ISTOF + 61)
      RT_34    = STOF(ISTOF + 62)
      RT_35    = STOF(ISTOF + 63)
      RT_36    = STOF(ISTOF + 64)
      RT_37    = STOF(ISTOF + 65)
      id       = STOF(ISTOF + 66)
      RT_38    = STOF(ISTOF + 67)
      RT_39    = STOF(ISTOF + 68)
      Kpd      = STOF(ISTOF + 69)
      Tid      = STOF(ISTOF + 70)
      Kpq      = STOF(ISTOF + 71)
      Tiq      = STOF(ISTOF + 72)
      iq       = STOF(ISTOF + 73)
      iqref    = STOF(ISTOF + 74)
      RT_40    = STOF(ISTOF + 75)
      RT_41    = STOF(ISTOF + 76)
      Ref_a    = STOF(ISTOF + 77)
      RT_42    = STOF(ISTOF + 78)
      RT_43    = STOF(ISTOF + 79)
      Edc_ref  = STOF(ISTOF + 80)
      Err_e    = STOF(ISTOF + 81)
      RT_44    = STOF(ISTOF + 82)
      Kp_dc    = STOF(ISTOF + 83)
      Ti_dc    = STOF(ISTOF + 84)
      RT_45    = STOF(ISTOF + 85)
      Ref_b    = STOF(ISTOF + 86)
      DBlk     = STOI(ISTOI + 3)
      Ref_c    = STOF(ISTOF + 89)
      RT_51    = STOF(ISTOF + 98)
      Err_d    = STOF(ISTOF + 99)
      Err_q    = STOF(ISTOF + 100)
      RT_52    = STOF(ISTOF + 101)
      idref    = STOF(ISTOF + 102)
      theta    = STOF(ISTOF + 103)
      Ea       = STOF(ISTOF + 104)
      Eb       = STOF(ISTOF + 105)
      Ec       = STOF(ISTOF + 106)
      RT_53    = STOF(ISTOF + 107)
      Ia_ac    = STOF(ISTOF + 108)
      Ib_ac    = STOF(ISTOF + 109)
      Ic_ac    = STOF(ISTOF + 110)
      RT_54    = STOF(ISTOF + 111)
      vd1      = STOF(ISTOF + 112)
      vq1      = STOF(ISTOF + 113)
      RT_55    = STOF(ISTOF + 114)
      RT_56    = STOF(ISTOF + 115)
      RT_57    = STOF(ISTOF + 116)
      RT_58    = STOF(ISTOF + 117)
      RT_59    = STOF(ISTOF + 118)
      Vpcc     = STOF(ISTOF + 119)
      RT_60    = STOF(ISTOF + 120)
      RT_61    = STOF(ISTOF + 121)
      RT_62    = STOF(ISTOF + 122)
      Ti_Q     = STOF(ISTOF + 123)
      Kp_Q     = STOF(ISTOF + 124)
      Ifura    = STOF(ISTOF + 125)
      Ifurb    = STOF(ISTOF + 126)
      Ifurc    = STOF(ISTOF + 127)
      RT_63    = STOF(ISTOF + 128)
      Ifurd_dc = STOF(ISTOF + 157)
      Ifurd    = STOF(ISTOF + 158)
      Ifurq_dc = STOF(ISTOF + 159)
      Ifurq    = STOF(ISTOF + 160)
      RT_68    = STOF(ISTOF + 161)
      Ifurq_err = STOF(ISTOF + 162)
      Corr     = STOF(ISTOF + 163)
      Ifurd_err = STOF(ISTOF + 164)
      RT_69    = STOF(ISTOF + 165)
      L        = STOF(ISTOF + 166)
      vq       = STOF(ISTOF + 167)

! Array (1:2) quantities...
      DO IT_0 = 1,2
         RT_7(IT_0) = STOF(ISTOF + 32 + IT_0)
         RT_46(IT_0) = STOF(ISTOF + 86 + IT_0)
         RT_47(IT_0) = STOF(ISTOF + 89 + IT_0)
         RT_48(IT_0) = STOF(ISTOF + 91 + IT_0)
         RT_49(IT_0) = STOF(ISTOF + 93 + IT_0)
         RT_50(IT_0) = STOF(ISTOF + 95 + IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         RT_64(IT_0) = STOF(ISTOF + 128 + IT_0)
         RT_65(IT_0) = STOF(ISTOF + 135 + IT_0)
         RT_66(IT_0) = STOF(ISTOF + 142 + IT_0)
         RT_67(IT_0) = STOF(ISTOF + 149 + IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         Pulses(IT_0) = STOF(ISTOF + 12 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Rectifier_Controls.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[var_switch] Two State Switch 'Deblock'
      IT_2 = NINT(CX(CXMAP(ICX+1)))

! 20:[time-sig] Output of Simulation Time 
      RT_4 = TIME

! 30:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,0.1,RT_4,0.0,0.0,1.0,RVD2_1)
      IT_1 = NINT(RVD2_1(1))

! 40:[const] Real Constant 'Hz'
      RT_41 = 8000.0

! 50:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL SAWTOOTH1_EXE(RT_41,Crr)
!

! 60:[pgb] Output Channel 'Carrier'

      PGB(IPGB+1) = Crr

! 70:[var] Variable Input Slider 'Vdc ref'
      RT_2 = CX(CXMAP(ICX+2))

! 80:[gain] Gain Block 
!  scale
      RT_1 = 0.001 * RT_2

! 90:[const] Real Constant 
      RT_57 = 0.0

! 100:[var] Variable Input Slider 'Kpd'
      Kpd = CX(CXMAP(ICX+3))

! 110:[const] Real Constant 
      RT_69 = 0.0

! 120:[var] Variable Input Slider 'Tid'
      Tid = CX(CXMAP(ICX+4))

! 130:[const] Real Constant 
      RT_68 = 0.0

! 140:[var] Variable Input Slider 'Kpq'
      Kpq = CX(CXMAP(ICX+5))

! 150:[var] Variable Input Slider 'Tiq'
      Tiq = CX(CXMAP(ICX+6))

! 170:[var] Variable Input Slider 'Kp_dc'
      Kp_dc = CX(CXMAP(ICX+7))

! 180:[var] Variable Input Slider 'Vref'
      RT_45 = CX(CXMAP(ICX+8))

! 190:[datatap] Scalar/Array Tap 
      RT_20 = Msrmnt(1)

! 200:[datatap] Scalar/Array Tap 
      RT_21 = Msrmnt(2)

! 210:[var] Variable Input Slider 'Ti_dc'
      Ti_dc = CX(CXMAP(ICX+9))

! 220:[const] Real Constant 
      RT_36 = 0.0

! 230:[datatap] Scalar/Array Tap 
      RT_22 = Msrmnt(3)

! 240:[datatap] Scalar/Array Tap 
      RT_23 = Msrmnt(4)

! 250:[var] Variable Input Slider 'Kp_Q'
      Kp_Q = CX(CXMAP(ICX+10))

! 260:[var] Variable Input Slider 'I fur Corr'
      Corr = CX(CXMAP(ICX+11))

! 270:[datatap] Scalar/Array Tap 
      RT_24 = Msrmnt(5)

! 280:[datatap] Scalar/Array Tap 
      RT_25 = Msrmnt(6)

! 290:[var] Variable Input Slider 'Ti_Q'
      Ti_Q = CX(CXMAP(ICX+12))

! 300:[datatap] Scalar/Array Tap 
      RT_26 = Msrmnt(7)

! 310:[datatap] Scalar/Array Tap 
      RT_30 = Msrmnt(8)

! 320:[datatap] Scalar/Array Tap 
      RT_28 = Msrmnt(9)

! 330:[datatap] Scalar/Array Tap 
      RT_44 = Msrmnt(10)

! 340:[datatap] Scalar/Array Tap 
      L = Msrmnt(11)

! 350:[datatap] Scalar/Array Tap 
      Vpcc = Msrmnt(12)

! 360:[mult] Multiplier 
      DBlk = IT_2 * IT_1

! 370:[unity] Type/Shape conversion block 
! real -> real
      Ea = RT_20

! 380:[sumjct] Summing/Differencing Junctions 
      RT_60 = - Vpcc + RT_45

! 390:[unity] Type/Shape conversion block 
! real -> real
      Eb = RT_21

! 400:[gain] Gain Block 
!  
      RT_62 = 1.0 * RT_60

! 410:[gain] Gain Block 
!  
      RT_58 = REAL(DBlk) * RT_62

! 420:[pi_ctlr] PI Controller \w Interpolation 
      RVD1_1 = RTCF(NRTCF)
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_58
      RVD2_1(2) = 0.0
      RT_59 = EMTDC_XPI(0,Kp_Q,Ti_Q,-100.0,50.0,RVD1_1,RVD2_1)

! 430:[unity] Type/Shape conversion block 
! real -> real
      Ec = RT_22

! 440:[gain] Gain Block 
!  
      RT_61 = -1.0 * RT_59

! 450:[unity] Type/Shape conversion block 
! real -> real
      Ia_ac = RT_23

! 460:[unity] Type/Shape conversion block 
! real -> real
      Ib_ac = RT_24

! 470:[unity] Type/Shape conversion block 
! real -> real
      Ic_ac = RT_25

! 480:[unity] Type/Shape conversion block 
! real -> real
      RT_27 = RT_26

! 490:[unity] Type/Shape conversion block 
! real -> real
      RT_31 = RT_30

! 500:[gain] Gain Block 
!  Gain
      Ifurb = Corr * RT_31

! 510:[unity] Type/Shape conversion block 
! real -> real
      RT_29 = RT_28

! 520:[unity] Type/Shape conversion block 
! real -> real
      Edc = RT_44

! 530:[gain] Gain Block 
!  Gain
      Ifurc = Corr * RT_29

! 540:[tvekta] Phase-Locked Loop 
      RVD1_1 = 1.57079632679
      CALL COMPONENT_ID(ICALL_NO,2117176360)
      CALL TVEKA1_EXE(Ea,Eb,Ec,950.0,1900.0,RVD1_1,0.0,1.2,0.8,theta,RVD&
     &1_3,RVD1_2)
!

! 550:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(Ia_ac,Ib_ac,Ic_ac,id,iq,RT_54,theta,1)

! 560:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         RT_3 = Edc
      ELSE
         RT_3 = RT_1
      ENDIF
      NRTCI = NRTCI + 1
!

! 570:[ratelimit] Rate Limiter 
!  kV/s
      CALL RATE_LIMITER(10.0,10.0,RT_3,Edc_ref)

! 580:[sumjct] Summing/Differencing Junctions 
      Err_e = - Edc + Edc_ref

! 590:[gain] Gain Block 
!  L
      RT_52 = REAL(DBlk) * Err_e

! 600:[pi_ctlr] PI Controller \w Interpolation 
      RVD1_1 = RTCF(NRTCF)
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_52
      RVD2_1(2) = 0.0
      idref = EMTDC_XPI(0,Kp_dc,Ti_dc,-40.0,40.0,RVD1_1,RVD2_1)

! 610:[gain] Gain Block 
!  w
      RT_34 = 377.0 * iq

! 620:[gain] Gain Block 
!  L
      RT_33 = L * RT_34

! 630:[gain] Gain Block 
!  Gain
      Ifura = Corr * RT_27

! 640:[gain] Gain Block 
!  w
      RT_51 = 377.0 * id

! 650:[gain] Gain Block 
!  L
      RT_37 = L * RT_51

! 660:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(Ea,Eb,Ec,vd,vq,RT_53,theta,1)

! 670:[abcdq0] abc dq0 transformation 
!ABC to DQ0 transformation
      CALL TRDQO(Ifura,Ifurb,Ifurc,Ifurd,Ifurq,RT_63,theta,1)

! 680:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,196187147)
      CALL FTN180(1,0,7,1,0.5,0.5,Ifurd,IVD1_1,RT_66,RT_64,Ifurd_dc)
      CALL FTN180(1,0,7,1,0.5,0.5,Ifurq,IVD1_1,RT_67,RT_65,Ifurq_dc)
!

! 690:[sumjct] Summing/Differencing Junctions 
      Ifurd_err = - Ifurd_dc + Ifurd

! 700:[sumjct] Summing/Differencing Junctions 
      Ifurq_err = - Ifurq_dc + Ifurq

! 710:[sumjct] Summing/Differencing Junctions 
      RT_38 = - Ifurd_err + idref

! 720:[sumjct] Summing/Differencing Junctions 
      RT_39 = - id + RT_38

! 730:[gain] Gain Block 
!  L
      Err_d = REAL(DBlk) * RT_39

! 740:[pi_ctlr] PI Controller \w Interpolation 
      RVD1_1 = RTCF(NRTCF)
      NRTCF = NRTCF + 1
      RVD2_1(1) = Err_d
      RVD2_1(2) = 0.0
      RT_32 = EMTDC_XPI(0,Kpd,Tid,-5.0,5.0,RVD1_1,RVD2_1)

! 750:[sumjct] Summing/Differencing Junctions 
      vd1 = - RT_32 + vd + RT_33

! 760:[sumjct] Summing/Differencing Junctions 
      iqref = - Ifurq_err + RT_61

! 770:[sumjct] Summing/Differencing Junctions 
      RT_40 = - iq + iqref

! 780:[gain] Gain Block 
!  L
      Err_q = REAL(DBlk) * RT_40

! 790:[pi_ctlr] PI Controller \w Interpolation 
      RVD1_1 = RTCF(NRTCF)
      NRTCF = NRTCF + 1
      RVD2_1(1) = Err_q
      RVD2_1(2) = 0.0
      RT_35 = EMTDC_XPI(0,Kpq,Tiq,-5.0,5.0,RVD1_1,RVD2_1)

! 800:[sumjct] Summing/Differencing Junctions 
      vq1 = - RT_35 + RT_36 - RT_37

! 810:[polar_rec] Polar Rectangular coordinate converter 
      RT_6 = SQRT(vd1*vd1+vq1*vq1)
      IF ((ABS(vd1).GT.1.0E-20).OR.(ABS(vq1).GT.1.0E-20)) THEN
        RT_43 = ATAN2(vq1,vd1)
      ELSE
        RT_43 = 0.0
      ENDIF

! 820:[div] Divider 
      IF (ABS(Edc) .LT. 1.0E-100) THEN
         IF (Edc .LT. 0.0)  THEN
            RT_5 = -1.0E100 * RT_6
         ELSE
            RT_5 =  1.0E100 * RT_6
         ENDIF
      ELSE
         RT_5 = RT_6 / Edc
      ENDIF

! 830:[polar_rec] Polar Rectangular coordinate converter 
      RT_55 = RT_5*COS(RT_43)
      RT_56 = RT_5*SIN(RT_43)

! 840:[abcdq0] abc dq0 transformation 
!DQ0 to ABC transformation
      CALL TRDQO(Ref_a,Ref_b,Ref_c,RT_55,RT_56,RT_57,theta,-1)

! 850:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_7(1) : OUTPUT PULSE
!    RT_7(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Ref_a,Crr,Crr,Ref_a,RT_7)
!

! 860:[gain] Gain Block 
!  wL
      RT_42 = 57.2958 * RT_43

! 870:[datatap] Scalar/Array Tap 
      RT_8 = RT_7(1)

! 880:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_46(1) : OUTPUT PULSE
!    RT_46(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Crr,Ref_b,Ref_b,Crr,RT_46)
!

! 890:[pgb] Output Channel 'vq1'

      PGB(IPGB+2) = vq1

! 900:[pgb] Output Channel 'Vpcc'

      PGB(IPGB+3) = Vpcc

! 910:[pgb] Output Channel 'iqref'

      PGB(IPGB+4) = iqref

! 920:[pgb] Output Channel 'q PI out'

      PGB(IPGB+5) = RT_35

! 930:[pgb] Output Channel 'Vref'

      PGB(IPGB+6) = RT_45

! 940:[pgb] Output Channel 'vd1'

      PGB(IPGB+7) = vd1

! 950:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_49(1) : OUTPUT PULSE
!    RT_49(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Crr,Ref_a,Ref_a,Crr,RT_49)
!

! 960:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_48(1) : OUTPUT PULSE
!    RT_48(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Ref_b,Crr,Crr,Ref_b,RT_48)
!

! 970:[pgb] Output Channel 'idref'

      PGB(IPGB+8) = RT_38

! 980:[pgb] Output Channel 'd PI out'

      PGB(IPGB+9) = RT_32

! 990:[pgb] Output Channel 'Delta'

      PGB(IPGB+10) = RT_42

! 1000:[pgb] Output Channel 'Iq err - funace'

      PGB(IPGB+11) = Ifurq_err

! 1010:[pgb] Output Channel 'Phase a Reference'

      PGB(IPGB+12) = Ref_a

! 1020:[pgb] Output Channel 'Vdc ref'

      PGB(IPGB+13) = Edc_ref

! 1030:[pgb] Output Channel 'm*'

      PGB(IPGB+14) = RT_5

! 1040:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_50(1) : OUTPUT PULSE
!    RT_50(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Ref_c,Crr,Crr,Ref_c,RT_50)
!

! 1050:[pgb] Output Channel 'Id err - funace'

      PGB(IPGB+15) = Ifurd_err

! 1060:[fp_int] Interpolated Firing Pulses 
      RVD1_1 = 1.0E6
      RVD1_2 = -1.0E6
!
!  TO INTERPOLATE FIRING PULSES
!    RT_47(1) : OUTPUT PULSE
!    RT_47(2) : DT FOR INTERPOLATION
      CALL EMTDC_IGFP(DBlk,RVD1_1,RVD1_2,Crr,Ref_c,Ref_c,Crr,RT_47)
!

! 1070:[pgb] Output Channel 'Vdc'

      PGB(IPGB+16) = Edc

! 1080:[datatap] Scalar/Array Tap 
      RT_15 = RT_49(2)

! 1090:[datatap] Scalar/Array Tap 
      RT_14 = RT_49(1)

! 1100:[datatap] Scalar/Array Tap 
      RT_13 = RT_48(2)

! 1110:[datatap] Scalar/Array Tap 
      RT_12 = RT_48(1)

! 1120:[datatap] Scalar/Array Tap 
      RT_17 = RT_50(2)

! 1130:[datatap] Scalar/Array Tap 
      RT_16 = RT_50(1)

! 1140:[datatap] Scalar/Array Tap 
      RT_11 = RT_47(2)

! 1150:[datatap] Scalar/Array Tap 
      RT_10 = RT_47(1)

! 1160:[datatap] Scalar/Array Tap 
      RT_19 = RT_46(2)

! 1170:[datatap] Scalar/Array Tap 
      RT_18 = RT_46(1)

! 1180:[datatap] Scalar/Array Tap 
      RT_9 = RT_7(2)

! 1190:[pgb] Output Channel '<Untitled>'

      PGB(IPGB+17) = RT_8

! 1200:[datamerge] Merges data signals into an array 
      Pulses(1) = RT_8
      Pulses(2) = RT_9
      Pulses(3) = RT_10
      Pulses(4) = RT_11
      Pulses(5) = RT_12
      Pulses(6) = RT_13
      Pulses(7) = RT_14
      Pulses(8) = RT_15
      Pulses(9) = RT_16
      Pulses(10) = RT_17
      Pulses(11) = RT_18
      Pulses(12) = RT_19

! 1210:[pgb] Output Channel 'iq furnace'

      PGB(IPGB+18) = Ifurq

! 1230:[pgb] Output Channel 'id furnace'

      PGB(IPGB+19) = Ifurd

! 1240:[pgb] Output Channel 'iq'

      PGB(IPGB+20) = iq

! 1250:[pgb] Output Channel 'id'

      PGB(IPGB+21) = id

! 1260:[pgb] Output Channel 'thpll'

      PGB(IPGB+22) = theta

! 1270:[pgb] Output Channel 'vq'

      PGB(IPGB+23) = vq

! 1280:[pgb] Output Channel 'vd'

      PGB(IPGB+24) = vd

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 25) = RT_1
      STOF(ISTOF + 26) = RT_2
      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 27) = RT_3
      STOI(ISTOI + 2) = IT_2
      STOF(ISTOF + 28) = RT_4
      STOF(ISTOF + 29) = RT_5
      STOF(ISTOF + 30) = RT_6
      STOF(ISTOF + 31) = Edc
      STOF(ISTOF + 32) = Crr
      STOF(ISTOF + 35) = RT_8
      STOF(ISTOF + 36) = RT_9
      STOF(ISTOF + 37) = RT_10
      STOF(ISTOF + 38) = RT_11
      STOF(ISTOF + 39) = RT_12
      STOF(ISTOF + 40) = RT_13
      STOF(ISTOF + 41) = RT_14
      STOF(ISTOF + 42) = RT_15
      STOF(ISTOF + 43) = RT_16
      STOF(ISTOF + 44) = RT_17
      STOF(ISTOF + 45) = RT_18
      STOF(ISTOF + 46) = RT_19
      STOF(ISTOF + 47) = RT_20
      STOF(ISTOF + 48) = RT_21
      STOF(ISTOF + 49) = RT_22
      STOF(ISTOF + 50) = RT_23
      STOF(ISTOF + 51) = RT_24
      STOF(ISTOF + 52) = RT_25
      STOF(ISTOF + 53) = RT_26
      STOF(ISTOF + 54) = RT_27
      STOF(ISTOF + 55) = RT_28
      STOF(ISTOF + 56) = RT_29
      STOF(ISTOF + 57) = RT_30
      STOF(ISTOF + 58) = RT_31
      STOF(ISTOF + 59) = RT_32
      STOF(ISTOF + 60) = vd
      STOF(ISTOF + 61) = RT_33
      STOF(ISTOF + 62) = RT_34
      STOF(ISTOF + 63) = RT_35
      STOF(ISTOF + 64) = RT_36
      STOF(ISTOF + 65) = RT_37
      STOF(ISTOF + 66) = id
      STOF(ISTOF + 67) = RT_38
      STOF(ISTOF + 68) = RT_39
      STOF(ISTOF + 69) = Kpd
      STOF(ISTOF + 70) = Tid
      STOF(ISTOF + 71) = Kpq
      STOF(ISTOF + 72) = Tiq
      STOF(ISTOF + 73) = iq
      STOF(ISTOF + 74) = iqref
      STOF(ISTOF + 75) = RT_40
      STOF(ISTOF + 76) = RT_41
      STOF(ISTOF + 77) = Ref_a
      STOF(ISTOF + 78) = RT_42
      STOF(ISTOF + 79) = RT_43
      STOF(ISTOF + 80) = Edc_ref
      STOF(ISTOF + 81) = Err_e
      STOF(ISTOF + 82) = RT_44
      STOF(ISTOF + 83) = Kp_dc
      STOF(ISTOF + 84) = Ti_dc
      STOF(ISTOF + 85) = RT_45
      STOF(ISTOF + 86) = Ref_b
      STOI(ISTOI + 3) = DBlk
      STOF(ISTOF + 89) = Ref_c
      STOF(ISTOF + 98) = RT_51
      STOF(ISTOF + 99) = Err_d
      STOF(ISTOF + 100) = Err_q
      STOF(ISTOF + 101) = RT_52
      STOF(ISTOF + 102) = idref
      STOF(ISTOF + 103) = theta
      STOF(ISTOF + 104) = Ea
      STOF(ISTOF + 105) = Eb
      STOF(ISTOF + 106) = Ec
      STOF(ISTOF + 107) = RT_53
      STOF(ISTOF + 108) = Ia_ac
      STOF(ISTOF + 109) = Ib_ac
      STOF(ISTOF + 110) = Ic_ac
      STOF(ISTOF + 111) = RT_54
      STOF(ISTOF + 112) = vd1
      STOF(ISTOF + 113) = vq1
      STOF(ISTOF + 114) = RT_55
      STOF(ISTOF + 115) = RT_56
      STOF(ISTOF + 116) = RT_57
      STOF(ISTOF + 117) = RT_58
      STOF(ISTOF + 118) = RT_59
      STOF(ISTOF + 119) = Vpcc
      STOF(ISTOF + 120) = RT_60
      STOF(ISTOF + 121) = RT_61
      STOF(ISTOF + 122) = RT_62
      STOF(ISTOF + 123) = Ti_Q
      STOF(ISTOF + 124) = Kp_Q
      STOF(ISTOF + 125) = Ifura
      STOF(ISTOF + 126) = Ifurb
      STOF(ISTOF + 127) = Ifurc
      STOF(ISTOF + 128) = RT_63
      STOF(ISTOF + 157) = Ifurd_dc
      STOF(ISTOF + 158) = Ifurd
      STOF(ISTOF + 159) = Ifurq_dc
      STOF(ISTOF + 160) = Ifurq
      STOF(ISTOF + 161) = RT_68
      STOF(ISTOF + 162) = Ifurq_err
      STOF(ISTOF + 163) = Corr
      STOF(ISTOF + 164) = Ifurd_err
      STOF(ISTOF + 165) = RT_69
      STOF(ISTOF + 166) = L
      STOF(ISTOF + 167) = vq

! Array (1:2) quantities...
      DO IT_0 = 1,2
         STOF(ISTOF + 32 + IT_0) = RT_7(IT_0)
         STOF(ISTOF + 86 + IT_0) = RT_46(IT_0)
         STOF(ISTOF + 89 + IT_0) = RT_47(IT_0)
         STOF(ISTOF + 91 + IT_0) = RT_48(IT_0)
         STOF(ISTOF + 93 + IT_0) = RT_49(IT_0)
         STOF(ISTOF + 95 + IT_0) = RT_50(IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 128 + IT_0) = RT_64(IT_0)
         STOF(ISTOF + 135 + IT_0) = RT_65(IT_0)
         STOF(ISTOF + 142 + IT_0) = RT_66(IT_0)
         STOF(ISTOF + 149 + IT_0) = RT_67(IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         STOF(ISTOF + 0 + IT_0) = Msrmnt(IT_0)
         STOF(ISTOF + 12 + IT_0) = Pulses(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !Pulses   is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Rectifier_ControlsOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_36, RT_41, RT_57, RT_68, RT_69

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 24
      NCX       = NCX + 0
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_36    = STOF(ISTOF + 64)
      RT_41    = STOF(ISTOF + 76)
      RT_57    = STOF(ISTOF + 116)
      RT_68    = STOF(ISTOF + 161)
      RT_69    = STOF(ISTOF + 165)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Rectifier_Controls.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 40:[const] Real Constant 'Hz'

      RT_41 = 8000.0

! 90:[const] Real Constant 

      RT_57 = 0.0

! 110:[const] Real Constant 

      RT_69 = 0.0

! 130:[const] Real Constant 

      RT_68 = 0.0

! 220:[const] Real Constant 

      RT_36 = 0.0

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 64) = RT_36
      STOF(ISTOF + 76) = RT_41
      STOF(ISTOF + 116) = RT_57
      STOF(ISTOF + 161) = RT_68
      STOF(ISTOF + 165) = RT_69


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Rectifier_ControlsDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_36, RT_41, RT_57, RT_68, RT_69

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ICX                                 ! Control/Monitoring
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ICX       = NCX
      NCX       = NCX + 12
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[var_switch] Two State Switch 'Deblock'

! 20:[time-sig] Output of Simulation Time 

! 30:[compare] Single Input Level Comparator 

! 40:[const] Real Constant 'Hz'
      RT_41 = 8000.0

! 50:[sig_gen] Variable Frequency Sawtooth Generator 
      CALL COMPONENT_ID(ICALL_NO,1567327400)
      CALL SAWTOOTH1_CFG(1.0,-1.0)

! 60:[pgb] Output Channel 'Carrier'

! 70:[var] Variable Input Slider 'Vdc ref'

! 80:[gain] Gain Block 

! 90:[const] Real Constant 
      RT_57 = 0.0

! 100:[var] Variable Input Slider 'Kpd'

! 110:[const] Real Constant 
      RT_69 = 0.0

! 120:[var] Variable Input Slider 'Tid'

! 130:[const] Real Constant 
      RT_68 = 0.0

! 140:[var] Variable Input Slider 'Kpq'

! 150:[var] Variable Input Slider 'Tiq'

! 170:[var] Variable Input Slider 'Kp_dc'

! 180:[var] Variable Input Slider 'Vref'

! 190:[datatap] Scalar/Array Tap 

! 200:[datatap] Scalar/Array Tap 

! 210:[var] Variable Input Slider 'Ti_dc'

! 220:[const] Real Constant 
      RT_36 = 0.0

! 230:[datatap] Scalar/Array Tap 

! 240:[datatap] Scalar/Array Tap 

! 250:[var] Variable Input Slider 'Kp_Q'

! 260:[var] Variable Input Slider 'I fur Corr'

! 270:[datatap] Scalar/Array Tap 

! 280:[datatap] Scalar/Array Tap 

! 290:[var] Variable Input Slider 'Ti_Q'

! 300:[datatap] Scalar/Array Tap 

! 310:[datatap] Scalar/Array Tap 

! 320:[datatap] Scalar/Array Tap 

! 330:[datatap] Scalar/Array Tap 

! 340:[datatap] Scalar/Array Tap 

! 350:[datatap] Scalar/Array Tap 

! 360:[mult] Multiplier 

! 370:[unity] Type/Shape conversion block 

! 380:[sumjct] Summing/Differencing Junctions 

! 390:[unity] Type/Shape conversion block 

! 400:[gain] Gain Block 

! 410:[gain] Gain Block 

! 420:[pi_ctlr] PI Controller \w Interpolation 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 430:[unity] Type/Shape conversion block 

! 440:[gain] Gain Block 

! 450:[unity] Type/Shape conversion block 

! 460:[unity] Type/Shape conversion block 

! 470:[unity] Type/Shape conversion block 

! 480:[unity] Type/Shape conversion block 

! 490:[unity] Type/Shape conversion block 

! 500:[gain] Gain Block 

! 510:[unity] Type/Shape conversion block 

! 520:[unity] Type/Shape conversion block 

! 530:[gain] Gain Block 

! 540:[tvekta] Phase-Locked Loop 
      CALL TVEKA1_CFG(1.0,60.0)

! 550:[abcdq0] abc dq0 transformation 

! 560:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 570:[ratelimit] Rate Limiter 

! 580:[sumjct] Summing/Differencing Junctions 

! 590:[gain] Gain Block 

! 600:[pi_ctlr] PI Controller \w Interpolation 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 610:[gain] Gain Block 

! 620:[gain] Gain Block 

! 630:[gain] Gain Block 

! 640:[gain] Gain Block 

! 650:[gain] Gain Block 

! 660:[abcdq0] abc dq0 transformation 

! 670:[abcdq0] abc dq0 transformation 

! 680:[fft] On-Line Frequency Scanner 

! 690:[sumjct] Summing/Differencing Junctions 

! 700:[sumjct] Summing/Differencing Junctions 

! 710:[sumjct] Summing/Differencing Junctions 

! 720:[sumjct] Summing/Differencing Junctions 

! 730:[gain] Gain Block 

! 740:[pi_ctlr] PI Controller \w Interpolation 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 750:[sumjct] Summing/Differencing Junctions 

! 760:[sumjct] Summing/Differencing Junctions 

! 770:[sumjct] Summing/Differencing Junctions 

! 780:[gain] Gain Block 

! 790:[pi_ctlr] PI Controller \w Interpolation 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 800:[sumjct] Summing/Differencing Junctions 

! 810:[polar_rec] Polar Rectangular coordinate converter 

! 820:[div] Divider 

! 830:[polar_rec] Polar Rectangular coordinate converter 

! 840:[abcdq0] abc dq0 transformation 

! 850:[fp_int] Interpolated Firing Pulses 

! 860:[gain] Gain Block 

! 870:[datatap] Scalar/Array Tap 

! 880:[fp_int] Interpolated Firing Pulses 

! 890:[pgb] Output Channel 'vq1'

! 900:[pgb] Output Channel 'Vpcc'

! 910:[pgb] Output Channel 'iqref'

! 920:[pgb] Output Channel 'q PI out'

! 930:[pgb] Output Channel 'Vref'

! 940:[pgb] Output Channel 'vd1'

! 950:[fp_int] Interpolated Firing Pulses 

! 960:[fp_int] Interpolated Firing Pulses 

! 970:[pgb] Output Channel 'idref'

! 980:[pgb] Output Channel 'd PI out'

! 990:[pgb] Output Channel 'Delta'

! 1000:[pgb] Output Channel 'Iq err - funace'

! 1010:[pgb] Output Channel 'Phase a Reference'

! 1020:[pgb] Output Channel 'Vdc ref'

! 1030:[pgb] Output Channel 'm*'

! 1040:[fp_int] Interpolated Firing Pulses 

! 1050:[pgb] Output Channel 'Id err - funace'

! 1060:[fp_int] Interpolated Firing Pulses 

! 1070:[pgb] Output Channel 'Vdc'

! 1080:[datatap] Scalar/Array Tap 

! 1090:[datatap] Scalar/Array Tap 

! 1100:[datatap] Scalar/Array Tap 

! 1110:[datatap] Scalar/Array Tap 

! 1120:[datatap] Scalar/Array Tap 

! 1130:[datatap] Scalar/Array Tap 

! 1140:[datatap] Scalar/Array Tap 

! 1150:[datatap] Scalar/Array Tap 

! 1160:[datatap] Scalar/Array Tap 

! 1170:[datatap] Scalar/Array Tap 

! 1180:[datatap] Scalar/Array Tap 

! 1190:[pgb] Output Channel '<Untitled>'

! 1200:[datamerge] Merges data signals into an array 

! 1210:[pgb] Output Channel 'iq furnace'

! 1230:[pgb] Output Channel 'id furnace'

! 1240:[pgb] Output Channel 'iq'

! 1250:[pgb] Output Channel 'id'

! 1260:[pgb] Output Channel 'thpll'

! 1270:[pgb] Output Channel 'vq'

! 1280:[pgb] Output Channel 'vd'

      RETURN
      END

!=======================================================================

      SUBROUTINE Rectifier_ControlsOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_36, RT_41, RT_57, RT_68, RT_69

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER SS                                  ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NCX       = NCX + 0
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 40:[const] Real Constant 'Hz'
      RT_41 = 8000.0

! 90:[const] Real Constant 
      RT_57 = 0.0

! 110:[const] Real Constant 
      RT_69 = 0.0

! 130:[const] Real Constant 
      RT_68 = 0.0

! 220:[const] Real Constant 
      RT_36 = 0.0

      RETURN
      END

