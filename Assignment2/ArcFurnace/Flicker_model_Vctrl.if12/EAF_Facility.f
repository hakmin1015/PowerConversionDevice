!=======================================================================
! Generated by: PSCAD v5.0.0.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : EAF_Facility
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE EAF_FacilityDyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    LCL_FilterDyn  ! 
!     SUBR    arc_diff      ! Simple Single Phase Furnace
!     SUBR    Rectifier_ControlsDyn  ! 
!     SUBR    RectifierDyn  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_3

! Control Signals
      INTEGER  BRK1
      REAL     RT_1(12), RT_2(3), Ra, Rb, Rc
      REAL     RT_3, Varc(3), P1, Vbus_rms, Q1, Q
      REAL     RT_4, L, I_C(3), RT_5, Ifur_c
      REAL     RT_6, Ifur_a, RT_7, Ifur_b, RT_8
      REAL     Ic_C, RT_9, Ib_C, RT_10, Ia_C
      REAL     RT_11, RT_12, RT_13, RT_14, Vpcc
      REAL     Signals(12), Ec1, Eb1, Ea1, V_dc
      REAL     Ib_ac, I_AC(3), Ec, Eb, Ea, Qst
      REAL     RT_15, RT_16, RT_17, IFL, Vbus(3)
      REAL     RT_18(3), Ifur(3), E1(3), E(3)
      REAL     Ic_AC, Ia_AC, Vn(3), Qpcc, Is2a
      REAL     Itfpa, Itfpb, Itfpc, Itfsa, Itfsb
      REAL     Itfsc, Pst, P

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, VarcA, IarcA
      REAL     RarcA, VarcB, IarcB, RarcB, VarcC
      REAL     IarcC, RarcC, RVD1_7

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 1
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 106
      IPGB      = NPGB
      NPGB      = NPGB + 45
      INODE     = NNODE + 2
      NNODE     = NNODE + 39
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 61
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Ra       = STOF(ISTOF + 16)
      Rb       = STOF(ISTOF + 17)
      Rc       = STOF(ISTOF + 18)
      RT_3     = STOF(ISTOF + 19)
      P1       = STOF(ISTOF + 23)
      Vbus_rms = STOF(ISTOF + 24)
      Q1       = STOF(ISTOF + 25)
      BRK1     = STOI(ISTOI + 1)
      Q        = STOF(ISTOF + 26)
      RT_4     = STOF(ISTOF + 27)
      L        = STOF(ISTOF + 28)
      RT_5     = STOF(ISTOF + 32)
      Ifur_c   = STOF(ISTOF + 33)
      RT_6     = STOF(ISTOF + 34)
      Ifur_a   = STOF(ISTOF + 35)
      RT_7     = STOF(ISTOF + 36)
      Ifur_b   = STOF(ISTOF + 37)
      RT_8     = STOF(ISTOF + 38)
      Ic_C     = STOF(ISTOF + 39)
      RT_9     = STOF(ISTOF + 40)
      Ib_C     = STOF(ISTOF + 41)
      RT_10    = STOF(ISTOF + 42)
      Ia_C     = STOF(ISTOF + 43)
      RT_11    = STOF(ISTOF + 44)
      RT_12    = STOF(ISTOF + 45)
      RT_13    = STOF(ISTOF + 46)
      RT_14    = STOF(ISTOF + 47)
      Vpcc     = STOF(ISTOF + 48)
      Ec1      = STOF(ISTOF + 61)
      Eb1      = STOF(ISTOF + 62)
      Ea1      = STOF(ISTOF + 63)
      V_dc     = STOF(ISTOF + 64)
      Ib_ac    = STOF(ISTOF + 65)
      Ec       = STOF(ISTOF + 69)
      Eb       = STOF(ISTOF + 70)
      Ea       = STOF(ISTOF + 71)
      Qst      = STOF(ISTOF + 72)
      RT_15    = STOF(ISTOF + 73)
      RT_16    = STOF(ISTOF + 74)
      RT_17    = STOF(ISTOF + 75)
      IFL      = STOF(ISTOF + 76)
      Ic_AC    = STOF(ISTOF + 92)
      Ia_AC    = STOF(ISTOF + 93)
      Qpcc     = STOF(ISTOF + 97)
      Is2a     = STOF(ISTOF + 98)
      Itfpa    = STOF(ISTOF + 99)
      Itfpb    = STOF(ISTOF + 100)
      Itfpc    = STOF(ISTOF + 101)
      Itfsa    = STOF(ISTOF + 102)
      Itfsb    = STOF(ISTOF + 103)
      Itfsc    = STOF(ISTOF + 104)
      Pst      = STOF(ISTOF + 105)
      P        = STOF(ISTOF + 106)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         RT_2(IT_0) = STOF(ISTOF + 12 + IT_0)
         Varc(IT_0) = STOF(ISTOF + 19 + IT_0)
         I_C(IT_0) = STOF(ISTOF + 28 + IT_0)
         I_AC(IT_0) = STOF(ISTOF + 65 + IT_0)
         Vbus(IT_0) = STOF(ISTOF + 76 + IT_0)
         RT_18(IT_0) = STOF(ISTOF + 79 + IT_0)
         Ifur(IT_0) = STOF(ISTOF + 82 + IT_0)
         E1(IT_0) = STOF(ISTOF + 85 + IT_0)
         E(IT_0) = STOF(ISTOF + 88 + IT_0)
         Vn(IT_0) = STOF(ISTOF + 93 + IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         RT_1(IT_0) = STOF(ISTOF + 0 + IT_0)
         Signals(IT_0) = STOF(ISTOF + 48 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_3  = NODE(INODE + 10)

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'EAF_Facility.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'tr'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH+37), (IBRCH+38), (IBRCH+39),SS,1.0,0)

! 30:[LCL_Filter]  
      CALL LCL_FilterDyn()


! 80:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK1 = 1
      ELSE
         BRK1 = 1
         IF ( TIME .GE. 0.013 ) BRK1 = (1-1)
      ENDIF

! 90:[breaker3] 3 Phase Breaker 'BRK1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+43),0.0001,1.0e+116,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+44),0.0001,1.0e+116,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+45),0.0001,1.0e+116,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+43),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+44),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+45),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1477290052,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1477290052,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1477290052,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+43),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+44),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+45),SS))

! 130:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T32'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH+28), (IBRCH+29), (IBRCH+30),SS,1.0,0)

! 180:[const] Real Constant 
      RT_3 = 1.0

! 580:[const] Real Constant '20uH'
      L = 2.0e-05

! 630:[eaf_vsc]  

!  Simple Single phase Furnace
      CALL arc_diff(RT_3, (IBRCH+13), (IBRCH+14), (IBRCH+15),SS,2600.0,0&
     &.5,30.0,45.0,0.005,8.8,0.02,0.005,8.8,0.02,0.005,8.8,0.02,VarcA,Va&
     &rcB,VarcC,IarcA,IarcB,IarcC,RarcA,RarcB,RarcC,3,3,3)
!
      Ra = RarcA
      Rb = RarcB
      Rc = RarcC

! 650:[datamerge] Merges data signals into an array 
      Signals(1) = RT_13
      Signals(2) = RT_14
      Signals(3) = RT_12
      Signals(4) = RT_11
      Signals(5) = RT_10
      Signals(6) = RT_9
      Signals(7) = RT_7
      Signals(8) = RT_8
      Signals(9) = RT_6
      Signals(10) = RT_5
      Signals(11) = L
      Signals(12) = Vpcc

! 660:[Rectifier_Controls]  
      CALL Rectifier_ControlsDyn(Signals, RT_1)


! 690:[datamerge] Merges data signals into an array 
      RT_2(1) = Ra
      RT_2(2) = Rb
      RT_2(3) = Rc

! 700:[pgb] Output Channel 'Rarc'

      DO IVD1_1 = 1, 3
         PGB(IPGB+29+IVD1_1-1) = RT_2(IVD1_1)
      ENDDO

! 730:[pgb] Output Channel 'Untitled'

      DO IVD1_1 = 1, 12
         PGB(IPGB+34+IVD1_1-1) = RT_1(IVD1_1)
      ENDDO

! 740:[Rectifier]  
      CALL RectifierDyn(RT_1)


! 1:[source1] Single Phase Voltage Source Model 1 'Source1'
!  Single Phase Source: Source1
      RVD1_1 = RTCF(NRTCF+12)*SQRT_3*SQRT_1BY2
      RVD1_2 = 0.0
      RVD1_3 = PI_BY2
      CALL ESYS651_EXE(SS, (IBRCH+60),0,0,0,0,0,  SS,NT_3,0,0,0,  RVD1_2&
     &, RVD1_1, 0.05,  1.0, 1.0, 1.0,RVD1_3,  1.0, 1.0, 1.0,  1.0, 1.0, &
     &1.0,  RVD1_4, RVD1_5, RVD1_6, RVD1_7)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 16) = Ra
      STOF(ISTOF + 17) = Rb
      STOF(ISTOF + 18) = Rc
      STOF(ISTOF + 19) = RT_3
      STOF(ISTOF + 23) = P1
      STOF(ISTOF + 24) = Vbus_rms
      STOF(ISTOF + 25) = Q1
      STOI(ISTOI + 1) = BRK1
      STOF(ISTOF + 26) = Q
      STOF(ISTOF + 27) = RT_4
      STOF(ISTOF + 28) = L
      STOF(ISTOF + 32) = RT_5
      STOF(ISTOF + 33) = Ifur_c
      STOF(ISTOF + 34) = RT_6
      STOF(ISTOF + 35) = Ifur_a
      STOF(ISTOF + 36) = RT_7
      STOF(ISTOF + 37) = Ifur_b
      STOF(ISTOF + 38) = RT_8
      STOF(ISTOF + 39) = Ic_C
      STOF(ISTOF + 40) = RT_9
      STOF(ISTOF + 41) = Ib_C
      STOF(ISTOF + 42) = RT_10
      STOF(ISTOF + 43) = Ia_C
      STOF(ISTOF + 44) = RT_11
      STOF(ISTOF + 45) = RT_12
      STOF(ISTOF + 46) = RT_13
      STOF(ISTOF + 47) = RT_14
      STOF(ISTOF + 48) = Vpcc
      STOF(ISTOF + 61) = Ec1
      STOF(ISTOF + 62) = Eb1
      STOF(ISTOF + 63) = Ea1
      STOF(ISTOF + 64) = V_dc
      STOF(ISTOF + 65) = Ib_ac
      STOF(ISTOF + 69) = Ec
      STOF(ISTOF + 70) = Eb
      STOF(ISTOF + 71) = Ea
      STOF(ISTOF + 72) = Qst
      STOF(ISTOF + 73) = RT_15
      STOF(ISTOF + 74) = RT_16
      STOF(ISTOF + 75) = RT_17
      STOF(ISTOF + 76) = IFL
      STOF(ISTOF + 92) = Ic_AC
      STOF(ISTOF + 93) = Ia_AC
      STOF(ISTOF + 97) = Qpcc
      STOF(ISTOF + 98) = Is2a
      STOF(ISTOF + 99) = Itfpa
      STOF(ISTOF + 100) = Itfpb
      STOF(ISTOF + 101) = Itfpc
      STOF(ISTOF + 102) = Itfsa
      STOF(ISTOF + 103) = Itfsb
      STOF(ISTOF + 104) = Itfsc
      STOF(ISTOF + 105) = Pst
      STOF(ISTOF + 106) = P

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 12 + IT_0) = RT_2(IT_0)
         STOF(ISTOF + 19 + IT_0) = Varc(IT_0)
         STOF(ISTOF + 28 + IT_0) = I_C(IT_0)
         STOF(ISTOF + 65 + IT_0) = I_AC(IT_0)
         STOF(ISTOF + 76 + IT_0) = Vbus(IT_0)
         STOF(ISTOF + 79 + IT_0) = RT_18(IT_0)
         STOF(ISTOF + 82 + IT_0) = Ifur(IT_0)
         STOF(ISTOF + 85 + IT_0) = E1(IT_0)
         STOF(ISTOF + 88 + IT_0) = E(IT_0)
         STOF(ISTOF + 93 + IT_0) = Vn(IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         STOF(ISTOF + 0 + IT_0) = RT_1(IT_0)
         STOF(ISTOF + 48 + IT_0) = Signals(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE EAF_FacilityOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    LCL_FilterOut  ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    VBRANCH       ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
      REAL    REALPOLE      ! Real Pole
!     SUBR    Flicker_IFL   ! 
!     SUBR    Rectifier_ControlsOut  ! 
!     SUBR    RectifierOut  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  a(3), NT_3, NT_4(3), NT_5, NT_6(3)
      INTEGER  NT_14(3), NT_18(3), NT_19(3)

! Control Signals
      REAL     RT_3, Varc(3), P1, Vbus_rms, Q1, Q
      REAL     RT_4, L, I_C(3), RT_5, Ifur_c
      REAL     RT_6, Ifur_a, RT_7, Ifur_b, RT_8
      REAL     Ic_C, RT_9, Ib_C, RT_10, Ia_C
      REAL     RT_11, RT_12, RT_13, RT_14, Vpcc
      REAL     Ec1, Eb1, Ea1, V_dc, Ib_ac
      REAL     I_AC(3), Ec, Eb, Ea, Qst, RT_15
      REAL     RT_16, RT_17, IFL, Vbus(3)
      REAL     RT_18(3), Ifur(3), E1(3), E(3)
      REAL     Ic_AC, Ia_AC, Vn(3), Qpcc, Is2a
      REAL     Itfpa, Itfpb, Itfpc, Itfsa, Itfsb
      REAL     Itfsc, Pst, P

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 45
      INODE     = NNODE + 2
      NNODE     = NNODE + 39
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 61
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_3     = STOF(ISTOF + 19)
      P1       = STOF(ISTOF + 23)
      Vbus_rms = STOF(ISTOF + 24)
      Q1       = STOF(ISTOF + 25)
      Q        = STOF(ISTOF + 26)
      RT_4     = STOF(ISTOF + 27)
      L        = STOF(ISTOF + 28)
      RT_5     = STOF(ISTOF + 32)
      Ifur_c   = STOF(ISTOF + 33)
      RT_6     = STOF(ISTOF + 34)
      Ifur_a   = STOF(ISTOF + 35)
      RT_7     = STOF(ISTOF + 36)
      Ifur_b   = STOF(ISTOF + 37)
      RT_8     = STOF(ISTOF + 38)
      Ic_C     = STOF(ISTOF + 39)
      RT_9     = STOF(ISTOF + 40)
      Ib_C     = STOF(ISTOF + 41)
      RT_10    = STOF(ISTOF + 42)
      Ia_C     = STOF(ISTOF + 43)
      RT_11    = STOF(ISTOF + 44)
      RT_12    = STOF(ISTOF + 45)
      RT_13    = STOF(ISTOF + 46)
      RT_14    = STOF(ISTOF + 47)
      Vpcc     = STOF(ISTOF + 48)
      Ec1      = STOF(ISTOF + 61)
      Eb1      = STOF(ISTOF + 62)
      Ea1      = STOF(ISTOF + 63)
      V_dc     = STOF(ISTOF + 64)
      Ib_ac    = STOF(ISTOF + 65)
      Ec       = STOF(ISTOF + 69)
      Eb       = STOF(ISTOF + 70)
      Ea       = STOF(ISTOF + 71)
      Qst      = STOF(ISTOF + 72)
      RT_15    = STOF(ISTOF + 73)
      RT_16    = STOF(ISTOF + 74)
      RT_17    = STOF(ISTOF + 75)
      IFL      = STOF(ISTOF + 76)
      Ic_AC    = STOF(ISTOF + 92)
      Ia_AC    = STOF(ISTOF + 93)
      Qpcc     = STOF(ISTOF + 97)
      Is2a     = STOF(ISTOF + 98)
      Itfpa    = STOF(ISTOF + 99)
      Itfpb    = STOF(ISTOF + 100)
      Itfpc    = STOF(ISTOF + 101)
      Itfsa    = STOF(ISTOF + 102)
      Itfsb    = STOF(ISTOF + 103)
      Itfsc    = STOF(ISTOF + 104)
      Pst      = STOF(ISTOF + 105)
      P        = STOF(ISTOF + 106)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Varc(IT_0) = STOF(ISTOF + 19 + IT_0)
         I_C(IT_0) = STOF(ISTOF + 28 + IT_0)
         I_AC(IT_0) = STOF(ISTOF + 65 + IT_0)
         Vbus(IT_0) = STOF(ISTOF + 76 + IT_0)
         RT_18(IT_0) = STOF(ISTOF + 79 + IT_0)
         Ifur(IT_0) = STOF(ISTOF + 82 + IT_0)
         E1(IT_0) = STOF(ISTOF + 85 + IT_0)
         E(IT_0) = STOF(ISTOF + 88 + IT_0)
         Vn(IT_0) = STOF(ISTOF + 93 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_3  = NODE(INODE + 10)
      NT_5  = NODE(INODE + 14)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         a(IT_0) = NODE(INODE + 0 + IT_0)
         NT_4(IT_0) = NODE(INODE + 10 + IT_0)
         NT_6(IT_0) = NODE(INODE + 14 + IT_0)
         NT_14(IT_0) = NODE(INODE + 20 + IT_0)
         NT_18(IT_0) = NODE(INODE + 27 + IT_0)
         NT_19(IT_0) = NODE(INODE + 30 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'EAF_Facility.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'tr'
      Itfpa = CDCTR(1,(IXFMR + 1))
      Itfpb = CDCTR(1,(IXFMR + 2))
      Itfpc = CDCTR(1,(IXFMR + 3))
      Itfsa = CDCTR(2,(IXFMR + 1))-CDCTR(2,(IXFMR + 2))
      Itfsb = CDCTR(2,(IXFMR + 2))-CDCTR(2,(IXFMR + 3))
      Itfsc = CDCTR(2,(IXFMR + 3))-CDCTR(2,(IXFMR + 1))

! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I_AC(1) = ( CBR((IBRCH+16), SS))
      I_AC(2) = ( CBR((IBRCH+17), SS))
      I_AC(3) = ( CBR((IBRCH+18), SS))
      E(1) = EMTDC_VVDC(SS, NT_19(1), 0)
      E(2) = EMTDC_VVDC(SS, NT_19(2), 0)
      E(3) = EMTDC_VVDC(SS, NT_19(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+16), (IBRCH+17), (IBRCH+1&
     &8),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1911600320,RVD1_1,"Pd")
      P = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+16), (IBRCH+17), (IBRCH+1&
     &8),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1911600320,RVD1_1,"Qd")
      Q = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1911600320,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1911600320,1,"hide2")
      ENDIF

! 30:[LCL_Filter]  
      CALL LCL_FilterOut()


! 40:[ammeter] Current Meter 'I_C'
      I_C(1) = ( CBR((IBRCH+57), SS))
      I_C(2) = ( CBR((IBRCH+58), SS))
      I_C(3) = ( CBR((IBRCH+59), SS))

! 50:[voltmetergnd] Voltmeter (Line - Ground) 'E1'
      E1(1) = EMTDC_VVDC(SS, NT_4(1), 0)
      E1(2) = EMTDC_VVDC(SS, NT_4(2), 0)
      E1(3) = EMTDC_VVDC(SS, NT_4(3), 0)

! 60:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1643647316,RVD1_1,"Pd")
      Pst = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1643647316,RVD1_1,"Qd")
      Qst = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS, NT_18(1), NT_18(2), NT_18(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1643647316,RVD1_1,"Vd")
      Vpcc = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1643647316,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1643647316,1,"hide2")
      ENDIF

! 70:[voltmeter] Voltmeter (Line - Line) 'V_dc'
      V_dc = EMTDC_VVDC(SS, NT_3, NT_5)

! 90:[breaker3] 3 Phase Breaker 'BRK1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS, (IBRCH+43), (IBRCH+44), (IBRCH+45),0,0,0,IVD1_1&
     &,0.02,RVD1_1,RVD1_2)

! 100:[voltmetergnd] Voltmeter (Line - Ground) 'Vbus'
      Vbus(1) = EMTDC_VVDC(SS, a(1), 0)
      Vbus(2) = EMTDC_VVDC(SS, a(2), 0)
      Vbus(3) = EMTDC_VVDC(SS, a(3), 0)

! 110:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Vn(1) = EMTDC_VVDC(SS, a(1), 0)
      Vn(2) = EMTDC_VVDC(SS, a(2), 0)
      Vn(3) = EMTDC_VVDC(SS, a(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+19), (IBRCH+20), (IBRCH+2&
     &1),RTCF(IVD1_1+2),0)
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+19), (IBRCH+20), (IBRCH+2&
     &1),RTCF(IVD1_1+2),0)
      Qpcc = RVD1_1
      CALL DGTL_RMS3(256,SS,a(1),a(2),a(3),RTCF(IVD1_1+3),1.0,0.0,RVD1_1&
     &)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      Vbus_rms = RVD1_1

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Ifur(1) = ( CBR((IBRCH+1), SS))
      Ifur(2) = ( CBR((IBRCH+2), SS))
      Ifur(3) = ( CBR((IBRCH+3), SS))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+1), (IBRCH+2), (IBRCH+3),&
     &RTCF(IVD1_1+2),0)
      P1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+1), (IBRCH+2), (IBRCH+3),&
     &RTCF(IVD1_1+2),0)
      Q1 = RVD1_1
      CALL DGTL_RMS3(256,SS,NT_6(1),NT_6(2),NT_6(3),RTCF(IVD1_1+3),1.0,0&
     &.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1

! 130:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T32'
      Is2a = CDCTR(2,(IXFMR + 4))-CDCTR(2,(IXFMR + 6))

! 140:[voltmetergnd] Voltmeter (Line - Ground) 'Varc'
      Varc(1) = EMTDC_VVDC(SS, NT_14(1), 0)
      Varc(2) = EMTDC_VVDC(SS, NT_14(2), 0)
      Varc(3) = EMTDC_VVDC(SS, NT_14(3), 0)

! 150:[pgb] Output Channel 'Vbus'

      DO IVD1_1 = 1, 3
         PGB(IPGB+1+IVD1_1-1) = Vbus(IVD1_1)
      ENDDO

! 160:[datatap] Scalar/Array Tap 
      RT_16 = Vbus(1)

! 170:[datatap] Scalar/Array Tap 
      RT_17 = Vbus(2)

! 180:[const] Real Constant 

      RT_3 = 1.0

! 190:[pgb] Output Channel 'Vbus'

      DO IVD1_1 = 1, 3
         PGB(IPGB+4+IVD1_1-1) = Vbus(IVD1_1)
      ENDDO

! 200:[pgb] Output Channel 'Q1'

      PGB(IPGB+7) = Q1

! 210:[realpole] Real Pole 
!  Real_Pole
      RT_4 = REALPOLE(0,1,0,1.0,0.01,Q,0.0,-1.0E20,1.0E20)

! 220:[pgb] Output Channel 'Q'

      PGB(IPGB+8) = 1000.0 * RT_4

! 230:[pgb] Output Channel 'Vbus_rms'

      PGB(IPGB+9) = Vbus_rms

! 240:[pgb] Output Channel 'P1'

      PGB(IPGB+10) = P1

! 250:[gain] Gain Block 
!  Gain
      RT_18 = 95.83 * Ifur

! 260:[pgb] Output Channel 'Varc'

      DO IVD1_1 = 1, 3
         PGB(IPGB+11+IVD1_1-1) = Varc(IVD1_1)
      ENDDO

! 270:[datatap] Scalar/Array Tap 
      Ifur_c = RT_18(3)

! 280:[datatap] Scalar/Array Tap 
      Ec = E(3)

! 290:[datatap] Scalar/Array Tap 
      Ifur_b = RT_18(2)

! 300:[datatap] Scalar/Array Tap 
      Ic_AC = I_AC(3)

! 310:[datatap] Scalar/Array Tap 
      Ec1 = E1(3)

! 320:[datatap] Scalar/Array Tap 
      Eb = E(2)

! 330:[datatap] Scalar/Array Tap 
      Ic_C = I_C(3)

! 340:[datatap] Scalar/Array Tap 
      Ib_ac = I_AC(2)

! 350:[datatap] Scalar/Array Tap 
      Ifur_a = RT_18(1)

! 360:[datatap] Scalar/Array Tap 
      Eb1 = E1(2)

! 370:[datatap] Scalar/Array Tap 
      Ea = E(1)

! 380:[datatap] Scalar/Array Tap 
      Ib_C = I_C(2)

! 390:[datatap] Scalar/Array Tap 
      Ia_AC = I_AC(1)

! 400:[datatap] Scalar/Array Tap 
      Ea1 = E1(1)

! 410:[datatap] Scalar/Array Tap 
      Ia_C = I_C(1)

! 420:[pgb] Output Channel 'Vb'

      PGB(IPGB+14) = Eb

! 430:[pgb] Output Channel 'Vb1'

      PGB(IPGB+15) = Eb1

! 440:[pgb] Output Channel 'Vc'

      PGB(IPGB+16) = Ec

! 450:[pgb] Output Channel 'Vc1'

      PGB(IPGB+17) = Ec1

! 460:[unity] Type/Shape conversion block 
! real -> real
      RT_7 = Ifur_a

! 470:[unity] Type/Shape conversion block 
! real -> real
      RT_8 = Ifur_b

! 480:[unity] Type/Shape conversion block 
! real -> real
      RT_6 = Ifur_c

! 490:[unity] Type/Shape conversion block 
! real -> real
      RT_5 = V_dc

! 500:[unity] Type/Shape conversion block 
! real -> real
      RT_13 = Ea

! 510:[unity] Type/Shape conversion block 
! real -> real
      RT_14 = Eb

! 520:[unity] Type/Shape conversion block 
! real -> real
      RT_12 = Ec

! 530:[unity] Type/Shape conversion block 
! real -> real
      RT_11 = Ia_C

! 540:[unity] Type/Shape conversion block 
! real -> real
      RT_10 = Ib_C

! 550:[unity] Type/Shape conversion block 
! real -> real
      RT_9 = Ic_C

! 560:[pgb] Output Channel 'AC source Ia'

      DO IVD1_1 = 1, 3
         PGB(IPGB+18+IVD1_1-1) = I_AC(IVD1_1)
      ENDDO

! 570:[pgb] Output Channel 'Converter Ia'

      DO IVD1_1 = 1, 3
         PGB(IPGB+21+IVD1_1-1) = I_C(IVD1_1)
      ENDDO

! 580:[const] Real Constant '20uH'

      L = 2.0e-05

! 590:[pgb] Output Channel 'Qst'

      PGB(IPGB+24) = Qst

! 600:[pgb] Output Channel 'DC bus'

      PGB(IPGB+25) = V_dc

! 610:[pgb] Output Channel 'AC source Ib'

      PGB(IPGB+26) = Ib_ac

! 620:[Flicker]  
!
      CALL Flicker_IFL(RT_16,RT_17,1.0,380000.0,1,2, RT_15)

! 640:[realpole] Real Pole 
!  Real_Pole
      IFL = REALPOLE(0,1,0,1.0,0.1,RT_15,0.0,-1.0E20,1.0E20)

! 660:[Rectifier_Controls]  
      CALL Rectifier_ControlsOut()


! 670:[pgb] Output Channel 'Va1'

      PGB(IPGB+27) = Ea1

! 680:[pgb] Output Channel 'Va'

      PGB(IPGB+28) = Ea

! 710:[pgb] Output Channel 'IFL'

      PGB(IPGB+32) = RT_15

! 720:[pgb] Output Channel 'IFL_smoothed'

      PGB(IPGB+33) = IFL

! 740:[Rectifier]  
      CALL RectifierOut()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 19) = RT_3
      STOF(ISTOF + 23) = P1
      STOF(ISTOF + 24) = Vbus_rms
      STOF(ISTOF + 25) = Q1
      STOF(ISTOF + 26) = Q
      STOF(ISTOF + 27) = RT_4
      STOF(ISTOF + 28) = L
      STOF(ISTOF + 32) = RT_5
      STOF(ISTOF + 33) = Ifur_c
      STOF(ISTOF + 34) = RT_6
      STOF(ISTOF + 35) = Ifur_a
      STOF(ISTOF + 36) = RT_7
      STOF(ISTOF + 37) = Ifur_b
      STOF(ISTOF + 38) = RT_8
      STOF(ISTOF + 39) = Ic_C
      STOF(ISTOF + 40) = RT_9
      STOF(ISTOF + 41) = Ib_C
      STOF(ISTOF + 42) = RT_10
      STOF(ISTOF + 43) = Ia_C
      STOF(ISTOF + 44) = RT_11
      STOF(ISTOF + 45) = RT_12
      STOF(ISTOF + 46) = RT_13
      STOF(ISTOF + 47) = RT_14
      STOF(ISTOF + 48) = Vpcc
      STOF(ISTOF + 61) = Ec1
      STOF(ISTOF + 62) = Eb1
      STOF(ISTOF + 63) = Ea1
      STOF(ISTOF + 64) = V_dc
      STOF(ISTOF + 65) = Ib_ac
      STOF(ISTOF + 69) = Ec
      STOF(ISTOF + 70) = Eb
      STOF(ISTOF + 71) = Ea
      STOF(ISTOF + 72) = Qst
      STOF(ISTOF + 73) = RT_15
      STOF(ISTOF + 74) = RT_16
      STOF(ISTOF + 75) = RT_17
      STOF(ISTOF + 76) = IFL
      STOF(ISTOF + 92) = Ic_AC
      STOF(ISTOF + 93) = Ia_AC
      STOF(ISTOF + 97) = Qpcc
      STOF(ISTOF + 98) = Is2a
      STOF(ISTOF + 99) = Itfpa
      STOF(ISTOF + 100) = Itfpb
      STOF(ISTOF + 101) = Itfpc
      STOF(ISTOF + 102) = Itfsa
      STOF(ISTOF + 103) = Itfsb
      STOF(ISTOF + 104) = Itfsc
      STOF(ISTOF + 105) = Pst
      STOF(ISTOF + 106) = P

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 19 + IT_0) = Varc(IT_0)
         STOF(ISTOF + 28 + IT_0) = I_C(IT_0)
         STOF(ISTOF + 65 + IT_0) = I_AC(IT_0)
         STOF(ISTOF + 76 + IT_0) = Vbus(IT_0)
         STOF(ISTOF + 79 + IT_0) = RT_18(IT_0)
         STOF(ISTOF + 82 + IT_0) = Ifur(IT_0)
         STOF(ISTOF + 85 + IT_0) = E1(IT_0)
         STOF(ISTOF + 88 + IT_0) = E(IT_0)
         STOF(ISTOF + 93 + IT_0) = Vn(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE EAF_FacilityDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    LCL_FilterDyn_Begin  ! 
!     SUBR    Rectifier_ControlsDyn_Begin  ! 
!     SUBR    RectifierDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_3, L

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 39
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 61
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'tr'
      CALL COMPONENT_ID(ICALL_NO,385849299)
      RVD1_1 = ONE_3RD*25.0
      RVD1_2 = 46.0*SQRT_1BY3
      RVD1_3 = 0.48
      CALL E_TF2W_CFG((IXFMR + 1),0,RVD1_1,60.0,0.01,0.0,RVD1_2,RVD1_3,1&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,60.0,0.01,0.0,RVD1_2,RVD1_3,1&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,60.0,0.01,0.0,RVD1_2,RVD1_3,1&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(25.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH+31),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+32),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+33),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+34),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+35),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+36),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH+37), (IBRCH+38), (IBRCH+39),SS,RVD1_1,RVD1_&
     &2,0.2,1.25,60.0,1.0,1.0,0.0)

! 30:[LCL_Filter]  
      CALL LCL_FilterDyn_Begin()


! 90:[breaker3] 3 Phase Breaker 'BRK1'
      CALL COMPONENT_ID(ICALL_NO,1477290052)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 130:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T32'
      CALL COMPONENT_ID(ICALL_NO,1037382571)
      RVD1_1 = ONE_3RD*25.0
      RVD1_2 = 46.0*SQRT_1BY3
      RVD1_3 = 0.58
      CALL E_TF2W_CFG((IXFMR + 4),0,RVD1_1,60.0,0.0636,0.0,RVD1_2,RVD1_3&
     &,0.4)
      CALL E_TF2W_CFG((IXFMR + 5),0,RVD1_1,60.0,0.0636,0.0,RVD1_2,RVD1_3&
     &,0.4)
      CALL E_TF2W_CFG((IXFMR + 6),0,RVD1_1,60.0,0.0636,0.0,RVD1_2,RVD1_3&
     &,0.4)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(25.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH+22),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+23),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+24),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+25),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+26),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+27),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH+28), (IBRCH+29), (IBRCH+30),SS,RVD1_1,RVD1_&
     &2,0.2,1.25,60.0,1.0,0.4,0.1)

! 180:[const] Real Constant 
      RT_3 = 1.0

! 580:[const] Real Constant '20uH'
      L = 2.0e-05

! 630:[eaf_vsc]  

! 650:[datamerge] Merges data signals into an array 

! 660:[Rectifier_Controls]  
      CALL Rectifier_ControlsDyn_Begin()


! 690:[datamerge] Merges data signals into an array 

! 700:[pgb] Output Channel 'Rarc'

! 730:[pgb] Output Channel 'Untitled'

! 740:[Rectifier]  
      CALL RectifierDyn_Begin()


! 1:[source1] Single Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,714620704)
      CALL ESYS651_CFG(2,1,0,0,0,SS, (IBRCH+60),0,0,0,0,0,60.0,0.0,PI_BY&
     &2,1.5,0.0,0.0,1.0,1.5,1.5,1.0,80.0,2.0,0.001,1.0,0.1,0.0,0.0,0.0,0&
     &.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE EAF_FacilityOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    LCL_FilterOut_Begin  ! 
!     SUBR    Rectifier_ControlsOut_Begin  ! 
!     SUBR    RectifierOut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  a(3), NT_3, NT_4(3), NT_5
      INTEGER  NT_14(3), NT_19(3)

! Control Signals
      REAL     RT_3, L

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 39
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 61
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_3  = NODE(INODE + 10)
      NT_5  = NODE(INODE + 14)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         a(IT_0) = NODE(INODE + 0 + IT_0)
         NT_4(IT_0) = NODE(INODE + 10 + IT_0)
         NT_14(IT_0) = NODE(INODE + 20 + IT_0)
         NT_19(IT_0) = NODE(INODE + 30 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 30:[LCL_Filter]  
      CALL LCL_FilterOut_Begin()


! 60:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(46.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(46.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 110:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(46.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(46.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(46.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(46.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 150:[pgb] Output Channel 'Vbus'

! 160:[datatap] Scalar/Array Tap 

! 170:[datatap] Scalar/Array Tap 

! 180:[const] Real Constant 
      RT_3 = 1.0

! 190:[pgb] Output Channel 'Vbus'

! 200:[pgb] Output Channel 'Q1'

! 210:[realpole] Real Pole 

! 220:[pgb] Output Channel 'Q'

! 230:[pgb] Output Channel 'Vbus_rms'

! 240:[pgb] Output Channel 'P1'

! 250:[gain] Gain Block 

! 260:[pgb] Output Channel 'Varc'

! 270:[datatap] Scalar/Array Tap 

! 280:[datatap] Scalar/Array Tap 

! 290:[datatap] Scalar/Array Tap 

! 300:[datatap] Scalar/Array Tap 

! 310:[datatap] Scalar/Array Tap 

! 320:[datatap] Scalar/Array Tap 

! 330:[datatap] Scalar/Array Tap 

! 340:[datatap] Scalar/Array Tap 

! 350:[datatap] Scalar/Array Tap 

! 360:[datatap] Scalar/Array Tap 

! 370:[datatap] Scalar/Array Tap 

! 380:[datatap] Scalar/Array Tap 

! 390:[datatap] Scalar/Array Tap 

! 400:[datatap] Scalar/Array Tap 

! 410:[datatap] Scalar/Array Tap 

! 420:[pgb] Output Channel 'Vb'

! 430:[pgb] Output Channel 'Vb1'

! 440:[pgb] Output Channel 'Vc'

! 450:[pgb] Output Channel 'Vc1'

! 460:[unity] Type/Shape conversion block 

! 470:[unity] Type/Shape conversion block 

! 480:[unity] Type/Shape conversion block 

! 490:[unity] Type/Shape conversion block 

! 500:[unity] Type/Shape conversion block 

! 510:[unity] Type/Shape conversion block 

! 520:[unity] Type/Shape conversion block 

! 530:[unity] Type/Shape conversion block 

! 540:[unity] Type/Shape conversion block 

! 550:[unity] Type/Shape conversion block 

! 560:[pgb] Output Channel 'AC source Ia'

! 570:[pgb] Output Channel 'Converter Ia'

! 580:[const] Real Constant '20uH'
      L = 2.0e-05

! 590:[pgb] Output Channel 'Qst'

! 600:[pgb] Output Channel 'DC bus'

! 610:[pgb] Output Channel 'AC source Ib'

! 620:[Flicker]  

! 640:[realpole] Real Pole 

! 660:[Rectifier_Controls]  
      CALL Rectifier_ControlsOut_Begin()


! 670:[pgb] Output Channel 'Va1'

! 680:[pgb] Output Channel 'Va'

! 710:[pgb] Output Channel 'IFL'

! 720:[pgb] Output Channel 'IFL_smoothed'

! 740:[Rectifier]  
      CALL RectifierOut_Begin()


      RETURN
      END

